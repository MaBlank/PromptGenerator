README.md:
```
# Spring Caching Beispiel

Dieses Projekt demonstriert die Verwendung von Caching in Spring Boot mit besonderem Fokus auf Sicherheitsaspekte beim Caching von Benutzerinformationen.

## Voraussetzungen

- Java 11 oder höher
- Maven
- Docker (für Redis im Produktionsprofil)

## Projektstruktur

- `src/main/java/com/example/springcaching/`
  - `Application.java` - Hauptklasse
  - `config/` - Konfigurationsklassen für Caffeine und Redis Cache
  - `controller/` - REST-Controller
  - `model/` - Domänenmodelle
  - `service/` - Services inkl. CachingUserDetailsService

## Profile

Das Projekt unterstützt drei Profile:

- `dev` (Standard) - Verwendet Caffeine als In-Memory-Cache
- `prod` - Verwendet Redis als verteilten Cache
- `test` - Verwendet Caffeine für Tests

## Starten der Anwendung

### Entwicklungsmodus (Caffeine)

```bash
mvn spring-boot:run
```

### Produktionsmodus (Redis)

1. Redis-Container starten:
```bash
docker-compose up -d
```

2. Anwendung mit Prod-Profil starten:
```bash
mvn spring-boot:run -Dspring.profiles.active=prod
```

## Tests ausführen

```bash
mvn test
```

## API-Endpunkte

- `GET /public` - Öffentlicher Endpunkt
- `GET /secure` - Geschützter Endpunkt (Authentifizierung erforderlich)
- `POST /changePassword` - Passwort ändern (ohne Cache-Eviction)
- `POST /changePasswordWithEvict` - Passwort ändern (mit Cache-Eviction)

## Beispiel-Benutzer

- Username: alice, Passwort: password123
- Username: bob, Passwort: adminSecret

## Sicherheitshinweise

Das Projekt demonstriert potenzielle Sicherheitsrisiken beim Caching von Benutzerinformationen:

1. Ohne Cache-Eviction (`/changePassword`):
   - Passwortänderungen werden nicht sofort wirksam
   - Alte Anmeldedaten bleiben im Cache gültig

2. Mit Cache-Eviction (`/changePasswordWithEvict`):
   - Cache wird invalidiert
   - Neue Anmeldedaten werden sofort wirksam

In Produktionsumgebungen sollten Sie:

- Cache-Timeouts kurz halten
- Cache-Eviction bei sicherheitsrelevanten Änderungen implementieren
- Eventuell ganz auf das Caching von Benutzerinformationen verzichten 
```

Directory Structure:
[.vscode/]
    settings.json
README.md
pom.xml
[src/]
    [main/]
        [java/]
            [com/]
                [example/]
                    [demo/]
                        DemoApplication.java
                        [controller/]
                            CalculationController.java
                            ItemController.java
                        [model/]
                            CalculationRequest.java
                            CalculationResult.java
                            Item.java
                        [repository/]
                            ItemRepository.java
                        [service/]
                            CalculationService.java
                            ItemService.java
                    [springcaching/]
                        Application.java
                        [config/]
                            SecurityConfig.java
                        [controller/]
                        [model/]
                        [service/]
        [resources/]
            application.yml
    [test/]
        [java/]
            [com/]
                [example/]
                    [demo/]
                        [api/]
                            CalculationApiTest.java
                        [http/]
                            CalculationHttpTest.java
                        [integration/]
                            ItemControllerIntegrationTest.java
                        [pact/]
                            ConsumerPactTest.java
                            ProviderPactTest.java
                        [unit/]
                            CalculationServiceTest.java
                    [springcaching/]


=== Build & Config Files ===

pom.xml:
```
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>spring-testing-example</artifactId>
    <version>1.0-SNAPSHOT</version>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.0</version>
    </parent>

    <properties>
        <java.version>11</java.version>
    </properties>

    <dependencies>
        <!-- Spring Boot Starter Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Security -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
            <scope>provided</scope>
        </dependency>

        <!-- Test Dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Pact für Contract Testing -->
        <dependency>
            <groupId>au.com.dius.pact.consumer</groupId>
            <artifactId>junit5</artifactId>
            <version>4.3.8</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>au.com.dius.pact.provider</groupId>
            <artifactId>junit5</artifactId>
            <version>4.3.8</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>au.com.dius.pact.provider</groupId>
            <artifactId>junit5spring</artifactId>
            <version>4.3.8</version>
            <scope>test</scope>
        </dependency>

        <!-- Rest-Assured für HTTP Tests -->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project> 
```

=== Source Files ===

    .vscode\settings.json:
    ```
{
    "java.compile.nullAnalysis.mode": "automatic",
    "java.configuration.updateBuildConfiguration": "automatic"
}
    ```

README.md:
```
# Spring Caching Beispiel

Dieses Projekt demonstriert die Verwendung von Caching in Spring Boot mit besonderem Fokus auf Sicherheitsaspekte beim Caching von Benutzerinformationen.

## Voraussetzungen

- Java 11 oder höher
- Maven
- Docker (für Redis im Produktionsprofil)

## Projektstruktur

- `src/main/java/com/example/springcaching/`
  - `Application.java` - Hauptklasse
  - `config/` - Konfigurationsklassen für Caffeine und Redis Cache
  - `controller/` - REST-Controller
  - `model/` - Domänenmodelle
  - `service/` - Services inkl. CachingUserDetailsService

## Profile

Das Projekt unterstützt drei Profile:

- `dev` (Standard) - Verwendet Caffeine als In-Memory-Cache
- `prod` - Verwendet Redis als verteilten Cache
- `test` - Verwendet Caffeine für Tests

## Starten der Anwendung

### Entwicklungsmodus (Caffeine)

```bash
mvn spring-boot:run
```

### Produktionsmodus (Redis)

1. Redis-Container starten:
```bash
docker-compose up -d
```

2. Anwendung mit Prod-Profil starten:
```bash
mvn spring-boot:run -Dspring.profiles.active=prod
```

## Tests ausführen

```bash
mvn test
```

## API-Endpunkte

- `GET /public` - Öffentlicher Endpunkt
- `GET /secure` - Geschützter Endpunkt (Authentifizierung erforderlich)
- `POST /changePassword` - Passwort ändern (ohne Cache-Eviction)
- `POST /changePasswordWithEvict` - Passwort ändern (mit Cache-Eviction)

## Beispiel-Benutzer

- Username: alice, Passwort: password123
- Username: bob, Passwort: adminSecret

## Sicherheitshinweise

Das Projekt demonstriert potenzielle Sicherheitsrisiken beim Caching von Benutzerinformationen:

1. Ohne Cache-Eviction (`/changePassword`):
   - Passwortänderungen werden nicht sofort wirksam
   - Alte Anmeldedaten bleiben im Cache gültig

2. Mit Cache-Eviction (`/changePasswordWithEvict`):
   - Cache wird invalidiert
   - Neue Anmeldedaten werden sofort wirksam

In Produktionsumgebungen sollten Sie:

- Cache-Timeouts kurz halten
- Cache-Eviction bei sicherheitsrelevanten Änderungen implementieren
- Eventuell ganz auf das Caching von Benutzerinformationen verzichten 
```

                        src\main\java\com\example\demo\DemoApplication.java:
                        ```
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
} 
                        ```

                            src\main\java\com\example\demo\controller\CalculationController.java:
                            ```
package com.example.demo.controller;

import com.example.demo.model.CalculationRequest;
import com.example.demo.model.CalculationResult;
import com.example.demo.service.CalculationService;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/calculate")
public class CalculationController {
    private final CalculationService service;

    public CalculationController(CalculationService service) {
        this.service = service;
    }

    @PostMapping
    public CalculationResult calculate(@RequestBody CalculationRequest request) {
        int result = service.calculate(request);
        return new CalculationResult(result);
    }
} 
                            ```

                            src\main\java\com\example\demo\controller\ItemController.java:
                            ```
package com.example.demo.controller;

import com.example.demo.model.Item;
import com.example.demo.service.ItemService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/items")
public class ItemController {
    private final ItemService service;

    public ItemController(ItemService service) {
        this.service = service;
    }

    @GetMapping
    public List<Item> findAll() {
        return service.findAll();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Item> findById(@PathVariable Long id) {
        return service.findById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public Item create(@RequestBody Item item) {
        return service.save(item);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Item> update(@PathVariable Long id, @RequestBody Item item) {
        if (!service.findById(id).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        item.setId(id);
        return ResponseEntity.ok(service.save(item));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        if (!service.findById(id).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        service.deleteById(id);
        return ResponseEntity.ok().build();
    }
} 
                            ```

                            src\main\java\com\example\demo\model\CalculationRequest.java:
                            ```
package com.example.demo.model;

import lombok.Data;

@Data
public class CalculationRequest {
    private int a;
    private int b;
    private String operation; // "ADD" oder "SUB"
} 
                            ```

                            src\main\java\com\example\demo\model\CalculationResult.java:
                            ```
package com.example.demo.model;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class CalculationResult {
    private int result;
} 
                            ```

                            src\main\java\com\example\demo\model\Item.java:
                            ```
package com.example.demo.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class Item {
    private Long id;
    private String name;
} 
                            ```

                            src\main\java\com\example\demo\repository\ItemRepository.java:
                            ```
package com.example.demo.repository;

import com.example.demo.model.Item;
import org.springframework.stereotype.Repository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

@Repository
public class ItemRepository {
    private final Map<Long, Item> store = new HashMap<>();
    private final AtomicLong counter = new AtomicLong();

    public List<Item> findAll() {
        return new ArrayList<>(store.values());
    }

    public Optional<Item> findById(Long id) {
        return Optional.ofNullable(store.get(id));
    }

    public Item save(Item item) {
        if (item.getId() == null) {
            item.setId(counter.incrementAndGet());
        }
        store.put(item.getId(), item);
        return item;
    }

    public void deleteById(Long id) {
        store.remove(id);
    }
} 
                            ```

                            src\main\java\com\example\demo\service\CalculationService.java:
                            ```
package com.example.demo.service;

import com.example.demo.model.CalculationRequest;
import org.springframework.stereotype.Service;

@Service
public class CalculationService {

    public int calculate(CalculationRequest request) {
        switch (request.getOperation().toUpperCase()) {
            case "ADD":
                return request.getA() + request.getB();
            case "SUB":
                return request.getA() - request.getB();
            default:
                throw new IllegalArgumentException(
                    "Unbekannte Operation: " + request.getOperation());
        }
    }
} 
                            ```

                            src\main\java\com\example\demo\service\ItemService.java:
                            ```
package com.example.demo.service;

import com.example.demo.model.Item;
import com.example.demo.repository.ItemRepository;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class ItemService {
    private final ItemRepository repository;

    public ItemService(ItemRepository repository) {
        this.repository = repository;
    }

    public List<Item> findAll() {
        return repository.findAll();
    }

    public Optional<Item> findById(Long id) {
        return repository.findById(id);
    }

    public Item save(Item item) {
        return repository.save(item);
    }

    public void deleteById(Long id) {
        repository.deleteById(id);
    }
} 
                            ```

                        src\main\java\com\example\springcaching\Application.java:
                        ```
package com.example.springcaching;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;

@SpringBootApplication
@EnableCaching
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
} 
                        ```

                            src\main\java\com\example\springcaching\config\SecurityConfig.java:
                            ```
package com.example.springcaching.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        return http
            .csrf().disable()
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/calculate/**").permitAll()
                .anyRequest().authenticated()
            )
            .build();
    }
} 
                            ```

            src\main\resources\application.yml:
            ```
server:
  port: 8080

spring:
  application:
    name: spring-testing-example 
            ```

=== Test Files ===

                            src\test\java\com\example\demo\api\CalculationApiTest.java:
                            ```
package com.example.demo.api;

import com.example.demo.model.CalculationRequest;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
class CalculationApiTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    void testAddition() throws Exception {
        CalculationRequest request = new CalculationRequest();
        request.setA(10);
        request.setB(5);
        request.setOperation("ADD");

        mockMvc.perform(post("/api/calculate")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.result").value(15));
    }

    @Test
    void testSubtraction() throws Exception {
        CalculationRequest request = new CalculationRequest();
        request.setA(10);
        request.setB(5);
        request.setOperation("SUB");

        mockMvc.perform(post("/api/calculate")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.result").value(5));
    }

    @Test
    void testInvalidOperation() throws Exception {
        String requestBody = "{\"a\":5,\"b\":10,\"operation\":\"MULTIPLY\"}";
        
        mockMvc.perform(post("/api/calculate")
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestBody))
                .andExpect(status().isBadRequest())
                .andExpect(result -> {
                    assertNotNull(result.getResolvedException(), "Exception sollte nicht null sein");
                    assertTrue(result.getResolvedException() instanceof IllegalArgumentException);
                });
    }
} 
                            ```

                            src\test\java\com\example\demo\http\CalculationHttpTest.java:
                            ```
package com.example.demo.http;

import io.restassured.RestAssured;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.server.LocalServerPort;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class CalculationHttpTest {

    @LocalServerPort
    private int port;

    @BeforeEach
    void setUp() {
        RestAssured.port = port;
        RestAssured.baseURI = "http://localhost";
    }

    @Test
    void testAddition() {
        String requestBody = "{\"a\":5,\"b\":10,\"operation\":\"ADD\"}";

        given()
            .contentType("application/json")
            .body(requestBody)
        .when()
            .post("/api/calculate")
        .then()
            .statusCode(200)
            .body("result", equalTo(15));
    }

    @Test
    void testSubtraction() {
        String requestBody = "{\"a\":15,\"b\":5,\"operation\":\"SUB\"}";

        given()
            .contentType("application/json")
            .body(requestBody)
        .when()
            .post("/api/calculate")
        .then()
            .statusCode(200)
            .body("result", equalTo(10));
    }
} 
                            ```

                            src\test\java\com\example\demo\integration\ItemControllerIntegrationTest.java:
                            ```
package com.example.demo.integration;

import com.example.demo.model.Item;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class ItemControllerIntegrationTest {

    @LocalServerPort
    private int port;

    @Autowired
    private TestRestTemplate restTemplate;

    @Test
    void testCreateAndFindItem() {
        // Erstelle ein neues Item
        Item newItem = new Item(null, "Test Item");
        ResponseEntity<Item> createResponse = restTemplate.postForEntity(
            getBaseUrl() + "/api/items", 
            newItem, 
            Item.class
        );

        assertEquals(HttpStatus.OK, createResponse.getStatusCode());
        assertNotNull(createResponse.getBody());
        assertNotNull(createResponse.getBody().getId());
        assertEquals("Test Item", createResponse.getBody().getName());

        // Hole das Item über GET
        Long itemId = createResponse.getBody().getId();
        ResponseEntity<Item> getResponse = restTemplate.getForEntity(
            getBaseUrl() + "/api/items/" + itemId,
            Item.class
        );

        assertEquals(HttpStatus.OK, getResponse.getStatusCode());
        assertEquals(itemId, getResponse.getBody().getId());
        assertEquals("Test Item", getResponse.getBody().getName());
    }

    @Test
    void testFindNonExistentItem() {
        ResponseEntity<Item> response = restTemplate.getForEntity(
            getBaseUrl() + "/api/items/999",
            Item.class
        );

        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
    }

    private String getBaseUrl() {
        return "http://localhost:" + port;
    }
} 
                            ```

                            src\test\java\com\example\demo\pact\ConsumerPactTest.java:
                            ```
package com.example.demo.pact;

import au.com.dius.pact.consumer.dsl.PactDslJsonBody;
import au.com.dius.pact.consumer.dsl.PactDslWithProvider;
import au.com.dius.pact.consumer.junit5.PactConsumerTestExt;
import au.com.dius.pact.consumer.junit5.PactTestFor;
import au.com.dius.pact.core.model.PactSpecVersion;
import au.com.dius.pact.core.model.RequestResponsePact;
import au.com.dius.pact.core.model.annotations.Pact;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import java.util.Collections;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;

@ExtendWith(PactConsumerTestExt.class)
@PactTestFor(providerName = "CalculationProvider", pactVersion = PactSpecVersion.V3)
class ConsumerPactTest {

    @Pact(consumer = "CalculationConsumer")
    public RequestResponsePact createPact(PactDslWithProvider builder) {
        return builder
            .given("a calculation endpoint exists")
            .uponReceiving("A request for addition")
            .path("/api/calculate")
            .method("POST")
            .headers(Collections.singletonMap("Content-Type", "application/json"))
            .body(new PactDslJsonBody()
                .numberValue("a", 2)
                .numberValue("b", 3)
                .stringValue("operation", "ADD"))
            .willRespondWith()
            .status(200)
            .headers(Collections.singletonMap("Content-Type", "application/json"))
            .body(new PactDslJsonBody()
                .numberValue("result", 5))
            .toPact();
    }

    @Test
    @PactTestFor(pactMethod = "createPact")
    void testAddition() {
        given()
            .contentType("application/json")
            .body("{\"a\":2,\"b\":3,\"operation\":\"ADD\"}")
        .when()
            .post("/api/calculate")
        .then()
            .statusCode(200)
            .body("result", equalTo(5));
    }
}

                            ```

                            src\test\java\com\example\demo\pact\ProviderPactTest.java:
                            ```
package com.example.demo.pact;

import au.com.dius.pact.provider.junit5.HttpTestTarget;
import au.com.dius.pact.provider.junit5.PactVerificationContext;
import au.com.dius.pact.provider.junitsupport.Provider;
import au.com.dius.pact.provider.junitsupport.State;
import au.com.dius.pact.provider.junitsupport.loader.PactFolder;
import au.com.dius.pact.provider.spring.junit5.PactVerificationSpringProvider;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.TestTemplate;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.server.LocalServerPort;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@Provider("CalculationProvider")
@PactFolder("pacts")
class ProviderPactTest {

    @LocalServerPort
    private int port;

    @BeforeEach
    void setUp(PactVerificationContext context) {
        context.setTarget(new HttpTestTarget("localhost", port));
    }

    @TestTemplate
    @ExtendWith(PactVerificationSpringProvider.class)
    void pactVerificationTestTemplate(PactVerificationContext context) {
        context.verifyInteraction();
    }

    @State("Standard Additionsanfrage")
    void toAdditionState() {
        // Hier könnte man den Zustand vorbereiten, falls nötig
        // In diesem Fall ist keine spezielle Vorbereitung erforderlich
    }
} 
                            ```

                            src\test\java\com\example\demo\unit\CalculationServiceTest.java:
                            ```
package com.example.demo.unit;

import com.example.demo.model.CalculationRequest;
import com.example.demo.service.CalculationService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import static org.junit.jupiter.api.Assertions.*;

class CalculationServiceTest {

    private CalculationService service;

    @BeforeEach
    void setUp() {
        service = new CalculationService();
    }

    @ParameterizedTest
    @CsvSource({
        "2, 3, ADD, 5",
        "5, 3, SUB, 2",
        "0, 0, ADD, 0",
        "-1, -1, ADD, -2",
        "10, -5, SUB, 15"
    })
    void testCalculations(int a, int b, String operation, int expected) {
        CalculationRequest request = new CalculationRequest();
        request.setA(a);
        request.setB(b);
        request.setOperation(operation);

        assertEquals(expected, service.calculate(request));
    }

    @Test
    void testInvalidOperation() {
        CalculationRequest request = new CalculationRequest();
        request.setA(1);
        request.setB(1);
        request.setOperation("MULTIPLY");

        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            service.calculate(request);
        });

        assertTrue(exception.getMessage().contains("Unbekannte Operation"));
    }
} 
                            ```
